package main

import (
	"bufio"
	"context"
	"fmt"
	"log"
	"log/slog"
	"os"
	"strings"
	"sync"
	"time"

	"go.opentelemetry.io/contrib/bridges/otelslog"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp"
	"go.opentelemetry.io/otel/log/global"
	sdk "go.opentelemetry.io/otel/sdk/log"
	"go.opentelemetry.io/otel/sdk/resource"
	semconv "go.opentelemetry.io/otel/semconv/v1.24.0"
)

// LogBuffer はログをバッファリングし、定期的にフラッシュするための構造体
type LogBuffer struct {
	buffer    *strings.Builder
	mutex     sync.Mutex
	batchSize int
	ticker    *time.Ticker
	label     map[string]string
	backend   LogBackend
	byteCount int // 現在のバイト数を追跡
}

// LogBackend はログの保存先を抽象化するインターフェース
type LogBackend interface {
	Flush(logs string) error
}

// OTLPBackend はOpenTelemetryのOTLP HTTPを使用するバックエンド実装
type OTLPBackend struct {
	logger         *slog.Logger
	loggerProvider *sdk.LoggerProvider
	serviceName    string
	attributes     map[string]string
}

// NewOTLPBackend はOpenTelemetryのバックエンドを作成します
func NewOTLPBackend(ctx context.Context, sid string, endpoint string, attributes map[string]string) (*OTLPBackend, error) {
	// リソース情報の設定
	serviceName := "logger"
	res, err := resource.New(ctx,
		resource.WithAttributes(
			semconv.ServiceName(serviceName),
		),
	)
	if err != nil {
		return nil, fmt.Errorf("failed to create resource: %w", err)
	}

	headers := map[string]string{
		"X-Scope-OrgID": sid,
	}

	// OTLP HTTP エクスポーターの作成
	exporter, err := otlploghttp.New(ctx,
		otlploghttp.WithEndpoint(endpoint),
		otlploghttp.WithURLPath("/otlp/v1/logs"),
		otlploghttp.WithHeaders(headers),
		otlploghttp.WithInsecure(), // 本番環境ではTLSを使用すること
	)
	if err != nil {
		return nil, fmt.Errorf("failed to create log exporter: %w", err)
	}

	// LoggerProviderの作成
	loggerProvider := sdk.NewLoggerProvider(
		sdk.WithResource(res),
		sdk.WithProcessor(sdk.NewBatchProcessor(
			exporter,
			sdk.WithMaxQueueSize(2048),
			sdk.WithMaxExportBatchSize(512),
			sdk.WithBatchTimeout(5*time.Second), // ログを最長5秒間蓄積した後、自動的に送信する
		)),
	)

	// Set the logger provider globally
	global.SetLoggerProvider(loggerProvider)

	// ロガー作成
	logger := otelslog.NewLogger(serviceName)

	return &OTLPBackend{
		logger:         logger,
		loggerProvider: loggerProvider,
		serviceName:    serviceName,
		attributes:     attributes,
	}, nil
}

// Flush はOpenTelemetryを使用してログを送信します
func (b *OTLPBackend) Flush(logs string) error {
	// 受け取ったログテキストを行ごとに分割
	logLines := strings.Split(logs, "\n")

	// 空の行を無視
	for _, line := range logLines {
		if line == "" {
			continue
		}

		// 属性の設定
		attrs := []attribute.KeyValue{}
		for k, v := range b.attributes {
			attrs = append(attrs, attribute.String(k, v))
		}

		// ログを送信
		// (b.logger).Info(line) // TODO: ALB,CloudFrontのログの場合、ログの中からステータスコードを取得して、それにあったログレベルを設定する
		(b.logger).Error(line)
	}

	// バッチを強制的に送信
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	return b.loggerProvider.ForceFlush(ctx) // 戻り値がerror型
}

// NewLogBuffer はバッファの新しいインスタンスを作成
func NewLogBuffer(batchSize int, flushInterval time.Duration, label map[string]string, backend LogBackend) *LogBuffer {
	buffer := &LogBuffer{
		buffer:    &strings.Builder{},
		batchSize: batchSize,
		label:     label,
		backend:   backend,
		byteCount: 0,
	}

	// 定期的なフラッシュのためのティッカーを開始
	buffer.ticker = time.NewTicker(flushInterval)
	go buffer.flushRoutine()

	return buffer
}

// Write はログをバッファに追加し、必要に応じてフラッシュ
func (lb *LogBuffer) Write(logEntry string) error {
	lb.mutex.Lock()
	defer lb.mutex.Unlock()

	// 改行を含むログエントリのサイズを計算
	entrySize := len(logEntry) + 1 // +1 for newline

	// ログエントリをバッファに追加
	lb.buffer.WriteString(logEntry)
	lb.buffer.WriteByte('\n')
	lb.byteCount += entrySize

	// バッファサイズがバッチサイズを超えたらフラッシュ
	if lb.byteCount >= lb.batchSize {
		return lb.flush()
	}
	return nil
}

// フラッシュループの処理
func (lb *LogBuffer) flushRoutine() {
	for range lb.ticker.C {
		lb.mutex.Lock()
		if lb.byteCount > 0 {
			if err := lb.flush(); err != nil {
				log.Printf("Error flushing logs: %v", err)
			}
		}
		lb.mutex.Unlock()
	}
}

// Stop はバッファの処理を停止し、残りのログをフラッシュ
func (lb *LogBuffer) Stop() error {
	lb.ticker.Stop()
	lb.mutex.Lock()
	defer lb.mutex.Unlock()
	return lb.flush()
}

// flush はバッファの内容をバックエンドに送信
func (lb *LogBuffer) flush() error {
	if lb.byteCount == 0 {
		return nil
	}

	// バッファの内容を文字列として取得
	logs := lb.buffer.String()

	// バッファをリセット
	lb.buffer.Reset()
	lb.byteCount = 0

	// バックエンドにログを送信
	return lb.backend.Flush(logs)
}

func main() {
	///// TODO: SQS or SNSからのS3オブジェクト情報から、SID・ログ種別を確認して、SID・ログ種別ごとにlogBufferインスタンスを作成する

	filePath := "/mnt/c/Users/nuts_/Github/Go/LogToOTLPhttp/log.txt"

	ctx := context.Background()

	// OpenTelemetryバックエンドの設定
	// endpoint := "localhost:4318" // OTLPレシーバーのエンドポイント
	endpoint := "192.168.0.177:31100"

	// カスタム属性の設定
	attributes := map[string]string{
		"environment": "development",
		"application": "log-forwarder",
	}

	// 第２引数がSID(Lokiのテナント識別子)なので、適宜変更
	otlpBackend, err := NewOTLPBackend(ctx, "fake", endpoint, attributes)
	if err != nil {
		log.Fatalf("Failed to create OTLP backend: %v", err)
	}

	label := map[string]string{
		"LogType": "alb",
	}
	// 例: 5MB以上または60秒ごとにフラッシュするバッファの作成
	logBuffer := NewLogBuffer(1024*1024*5, 10*time.Second, label, otlpBackend)

	// アプリケーション終了時にバッファを停止
	defer logBuffer.Stop()

	for {
		_, err := os.Stat(filePath)
		if os.IsNotExist(err) {
			log.Printf("ファイルは存在しません: %s\n", filePath)
			time.Sleep(300 * time.Second)
			continue
		} else if err != nil {
			log.Printf("エラー: %v\n", err)
			time.Sleep(300 * time.Second)
			continue
		}

		log.Printf("ファイルが存在します: %s - 内容を読み込みます\n", filePath)
		// ファイルを開く
		file, err := os.Open(filePath)
		if err != nil {
			log.Printf("ファイルを開けませんでした: %v\n", err)
			time.Sleep(300 * time.Second)
			continue
		}

		// ファイルを行ごとに読み込む
		scanner := bufio.NewScanner(file)
		lineCount := 0

		log.Println("ファイルの内容:")
		for scanner.Scan() {
			lineCount++
			line := scanner.Text()
			if err := logBuffer.Write(line); err != nil {
				log.Printf("Error writing log: %v", err)
			}
			log.Printf("行 %d: %s\n", lineCount, line)
		}

		if err := scanner.Err(); err != nil {
			log.Printf("ファイル読み込み中にエラーが発生しました: %v\n", err)
		}

		log.Printf("ファイル読み込み完了。合計 %d 行\n", lineCount)

		file.Close()

		// 次の確認まで待機
		time.Sleep(300 * time.Second)
	}
}
